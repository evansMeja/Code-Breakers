class Solver:
    def __init__(self):
        self.stack = []
    def insert(self,brace):
        if brace == "(":
            self.stack = self.stack + [brace]
            return True
        else:
            if len(self.stack) == 0:
                return False
            else:
                if self.stack[-1] == '(':
                    self.stack = self.stack[:-1]
                    return True
                return False       
    def is_empty(self,):
        return len(self.stack) == 0
    

class ParenthesisValidator:
    def isValid(self, s: str) -> bool:
        sol = Solver()
        for i in s:
            res = sol.insert(i)
            if res == False:
                return False
        return sol.is_empty()


class Solution:
    def longestValidParentheses(self, s: str) -> int:
        p = ParenthesisValidator()
        lg=0
        for i in range(0,len(s)):
            testParenthesis = s[i:]
            c = 0
            test2 = ''
            t=[]
            for x in testParenthesis:
                test2 = test2 + x
                if test2.count("(") == test2.count(")") and test2 not in t and p.isValid(test2):
                    length = len(test2)
                    if length > lg:
                        lg = length
                    t.append(test2) 
                c = c + 1
        return lg     


sol = Solution()
print(sol.longestValidParentheses("()"))
